# -*- coding: utf-8 -*-
"""AI_Academy_Colab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ai-academy318/aiacademy/blob/master/AI_Academy_Colab.ipynb
"""

### 下記の入力フィールドにプログラムを打ち込み、左の実行ボタンを押す事で書いたコードを実行できます。　###

def repeat_character(a, b):
  return a*b

sum = repeat_character(2, 4)
print(sum)

def a(a,b):
  return a + b

def b(a,b):
  return a * b

x = a(2, 2) # 4
y = b(x, x) # x*x

print(y)

def power(x):
  return x*x

def absolute(x):
  if (x < 0):
    return -x # +-reverse
  else:
    return x

power_value = power(10)
print(power_value)

absolute_value = absolute(-10)
print(absolute_value)

def func(a=3, b=5):
  print(a)
  print(b)

func(10, 15)
func(3)

def sample(arg, arg_list=[]):  # 変数arg_listはデフォルトでリスト型で空状態
  arg_list.append(arg)   # リストにargの値を追加
  print(arg_list)   # 出力

sample('python')    # ['python']
sample('Python')    # ['python', 'Python']  一度読み込んだ値が保持されている

def sample(arg):    # 引数はargのみ
  arg_list = []     # リストをarg_listに入れる  毎度初期化される
  arg_list.append(arg)
  print(arg_list)

sample('python')  # ['python']
sample('Python')  # ['Python']

def repeat_character(char, count):
  return char * int(count)        # int()しなくても繰り返せるようだ

repeat_character('python', 3)

def add(x1):
  x2 = 10     # ローカル関数  defを出るとエラーなる
  result = x1 + x2
  print(result)

add(5)    #15

glb = 0     # 変数

def func1():
  glb = 1   # ローカル変数

def func2():
  global glb    # グローバル変数
  glb = 5

print(glb)    # 0
func1()     #関数1実行
print(glb)    # 0
func2()     #関数2実行
print(glb)    # 5  def外の変数をも上塗りできる



var1 = 'グローバル変数'

def sample():
  var2 = 'ローカル変数'
  return (var1, var2)   # defより先に定義された変数をdef内で使える

print(sample())     # ('グローバル変数', 'ローカル変数')

from random import choice

def get_fortune():
  results = ['大吉', '小吉', '大凶']
  return "今日の運勢は" + choice(results) + "です！！！"    # returnは文字列も返せる
  
result = get_fortune()
print(result)    # 今日の運勢は大吉です